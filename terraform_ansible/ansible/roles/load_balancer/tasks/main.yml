---
# tasks file for deploy_nginx_web
- name: Update apt cache and install Nginx
  ansible.builtin.apt:
    name: nginx
    state: present
    update_cache: yes

- name: Start nginx and enable it on every boot
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: yes

- name: Copy and apply nginx main config
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
  notify: Reload Nginx

- name: Apply Nginx template
  ansible.builtin.template:
    src: nginx_vhost.conf.j2
    dest: /etc/nginx/sites-available/{{ server_name }}
  notify: Reload Nginx

- name: Copy nginx binary with mod_security
  ansible.builtin.get_url:
    url: https://strigun-public.s3.eu-north-1.amazonaws.com/pentest/nginx_mod_secure/nginx
    dest: /usr/sbin/nginx

- name: Copy nginx binary with mod_security
  ansible.builtin.get_url:
    url: https://strigun-public.s3.eu-north-1.amazonaws.com/pentest/nginx_mod_secure/ngx_http_modsecurity_module.so
    dest: /usr/sbin/ngx_http_modsecurity_module.so

- name: unpack mod_security
  ansible.builtin.unarchive:
    dest: /home/ubuntu/
    src: https://strigun-public.s3.eu-north-1.amazonaws.com/pentest/mod_security/ModSecurity.tar.gz
    remote_src: yes


- name: Update apt cache and install make and utils
  ansible.builtin.apt:
    pkg:
      - apt-utils
      - autoconf
      - automake
      - build-essential
      - libcurl4-openssl-dev
      - libgeoip-dev
      - liblmdb-dev
      - libpcre++-dev
      - libtool
      - libxml2-dev
      - libyajl-dev
      - pkgconf
      - zlib1g-dev
    state: present
    update_cache: yes

- name: install ModSecurity
  ansible.builtin.shell: make install
  args:
    chdir: /home/ubuntu/ModSecurity

- name: Copy mod_security
  ansible.builtin.get_url:
    url: https://strigun-public.s3.eu-north-1.amazonaws.com/pentest/nginx_mod_secure/ngx_http_modsecurity_module.so
    dest: /usr/lib/nginx/modules/

- name: Create directory modsec
  ansible.builtin.file:
    path: /etc/nginx/modsec/
    state: directory

- name: Copy config mod_security main
  ansible.builtin.copy:
    dest: /etc/nginx/modsec/main.conf
    src: modsec/main.conf

- name: Copy config mod_security unicode
  ansible.builtin.copy:
    dest: /etc/nginx/modsec/unicode.mapping
    src: /home/ubuntu/ModSecurity/unicode.mapping
    remote_src: yes

- name: Copy config mod_security conf
  ansible.builtin.copy:
    dest: /etc/nginx/modsec/modsecurity.conf
    src: /home/ubuntu/ModSecurity/modsecurity.conf-recommended
    remote_src: yes

- name: Config mod_security via OWASP
  ansible.builtin.git:
    dest: /user/ubuntu/owasp
    repo: https://github.com/coreruleset/coreruleset.git

- name: Copy config mod_security to nginx
  ansible.builtin.copy:
    src: /user/ubuntu/owasp/rules
    dest: /etc/nginx/owasp/
    remote_src: yes

- name: Copy config mod_security to nginx
  ansible.builtin.copy:
    src: /user/ubuntu/owasp/crs-setup.conf.example
    dest: /etc/nginx/owasp/crs-setup.conf
    remote_src: yes


- name: Enable new site
  ansible.builtin.file:
    src: /etc/nginx/sites-available/{{ server_name }}
    dest: /etc/nginx/sites-enabled/{{ server_name }}
    state: link
  notify: Reload Nginx

- name: Disable default nginx site
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Allow all access to tcp port 22
  community.general.ufw:
    rule: allow
    port: '22'
    proto: tcp

- name: Allow all access to tcp port 80
  community.general.ufw:
    rule: allow
    port: '80'
    proto: tcp

#- name: Allow all access to tcp port 443
#  community.general.ufw:
#    rule: allow
#    port: '443'
#    proto: tcp

- name: Deny everything and enable UFW
  community.general.ufw:
    state: enabled
    policy: deny

#- name: Update apt cache and install fail2ban
#  ansible.builtin.apt:
#    name: fail2ban
#    state: present
#    update_cache: yes
#
#- name: Start fail2ban and enable it on every boot
#  ansible.builtin.service:
#    name: fail2ban
#    state: started
#    enabled: yes
